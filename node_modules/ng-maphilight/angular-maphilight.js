import { Component, ElementRef, Input, KeyValueDiffers, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject as Subject$1 } from 'rxjs/Subject';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MaphilightComponent = /** @class */ (function () {
    function MaphilightComponent(elRef, differs) {
        this.elRef = elRef;
        this.events = {
            imgLoaded: new Subject$1(),
            updateMaphilight: new Subject$1(),
        };
        this.el = this.elRef.nativeElement;
        this.configDiffer = differs.find({}).create();
    }
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.img = this.el.querySelector('img');
        this.map = this.el.querySelector('map');
        var /** @type {?} */ id = this.el.getAttribute('id');
        this.img.setAttribute('usemap', '#' + id + ".map");
        this.map.setAttribute('id', id + ".map");
        this.map.setAttribute('name', id + ".map");
        // Wait until image is loaded. Otherwise the $(img).height() in maphilight.js may return 0,
        // which causes mouseover effect to break.
        // See also  https://stackoverflow.com/questions/16084374/jquery-width-and-height-return-0-for-img-element
        this.img.onload = function () {
            _this.events.imgLoaded.next();
            _this.updateMaphilight();
        };
    };
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.updateMaphilight = /**
     * @return {?}
     */
    function () {
        if (!this.img)
            return;
        this.events.updateMaphilight.next();
        window.jQuery(this.img).maphilight(this.configToApply());
    };
    
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ changes = this.configDiffer.diff(this.config);
        if (changes) {
            this.updateMaphilight();
        }
    };
    /**
     * @return {?}
     */
    MaphilightComponent.prototype.configToApply = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ config = Object.assign({}, this.config);
        if (config.strokeColor && config.strokeColor[0] == '#')
            config.strokeColor = config.strokeColor.substr(1);
        if (config.fillColor && config.fillColor[0] == '#')
            config.fillColor = config.fillColor.substr(1);
        if (config.shadowColor && config.shadowColor[0] == '#')
            config.shadowColor = config.shadowColor.substr(1);
        return config;
    };
    MaphilightComponent.decorators = [
        { type: Component, args: [{
                    selector: 'maphilight',
                    template: "<ng-content> </ng-content> ",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MaphilightComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: KeyValueDiffers, },
    ]; };
    MaphilightComponent.propDecorators = {
        "config": [{ type: Input },],
    };
    return MaphilightComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MaphilightModule = /** @class */ (function () {
    function MaphilightModule() {
    }
    MaphilightModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [MaphilightComponent],
                    exports: [MaphilightComponent]
                },] },
    ];
    /** @nocollapse */
    MaphilightModule.ctorParameters = function () { return []; };
    return MaphilightModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { MaphilightComponent, MaphilightModule };
